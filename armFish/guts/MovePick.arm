
MovePick_MAIN_SEARCH:
//Display 2, "MovePick_MAIN_SEARCH"
/*
		mov   r15, qword[rbx-1*sizeof.State+State.endMoves]
		mov   eax, dword[rbx+State.ttMove]
		lea   rdx, [MovePick_CAPTURES_GEN]
		mov   qword[rbx+State.stage], rdx
		ret
*/
        ldr  x25, [x21, -1*sizeof.State + State.endMoves]
        ldr  w0, [x21, State.ttMove]
        adr  x2, MovePick_CAPTURES_GEN
        str  x2, [x21, State.stage]
         br  x29

MovePick_CAPTURES_GEN:
//Display 2, "MovePick_CAPTURES_GEN"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
		mov   qword[rbx+State.endBadCaptures], rdi
	       call   Gen_Captures
		mov   r15, rdi
		mov   r13, r14
      ScoreCaptures   r13, rdi
		lea   rdx, [MovePick_GOOD_CAPTURES]
		mov   qword[rbx+State.stage], rdx
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
        str  x27, [x21, State.endBadCaptures]
         bl  Gen_Captures
        mov  x25, x27
        mov  x23, x24
        ScoreCaptures  x23, x27
        adr  x2, MovePick_GOOD_CAPTURES
        str  x2, [x21, State.stage]

MovePick_GOOD_CAPTURES:
//Display 2, "MovePick_GOOD_CAPTURES"
/*
		cmp   r14, r15
		 je   .WhileDone
	   PickBest   r14, r13, r15
		mov   edi, ecx
		cmp   ecx, dword[rbx+State.ttMove]
		 je   MovePick_GOOD_CAPTURES
	SeeSignTest   .Positive
		mov   rdx, qword[rbx+State.endBadCaptures]
	       test   eax, eax
		 jz   .Negative
*/
        cmp  x24, x25
        beq  MovePick_GOOD_CAPTURES.WhileDone
        PickBest  x24, x23, x25
        mov  w27, w1
        ldr  w4, [x21, State.ttMove]
        cmp  w1, w4
        beq  MovePick_GOOD_CAPTURES
        SeeSignTest  MovePick_GOOD_CAPTURES.Positive
        ldr  x2, [x21, State.endBadCaptures]
        cbz  w0, MovePick_GOOD_CAPTURES.Negative

MovePick_GOOD_CAPTURES.Positive:
//Display 2, "MovePick_GOOD_CAPTURES.Positive"
/*
		mov   eax, edi
		ret
*/
        mov  w0, w27
         br  x29

MovePick_GOOD_CAPTURES.Negative:
//Display 2, "MovePick_GOOD_CAPTURES.Negative"
/*
		mov   dword[rdx+ExtMove.move], edi
		add   rdx, sizeof.ExtMove
		mov   qword[rbx+State.endBadCaptures], rdx
		jmp   MovePick_GOOD_CAPTURES

*/
        str  w27, [x2, ExtMove.move]
        add  x2, x2, sizeof.ExtMove
        str  x2, [x21, State.endBadCaptures]
          b  MovePick_GOOD_CAPTURES

MovePick_GOOD_CAPTURES.WhileDone:
//Display 2, "MovePick_GOOD_CAPTURES.WhileDone"
/*
		lea   rdx, [MovePick_KILLERS]
		mov   qword[rbx+State.stage], rdx

	; first killer
		mov   edi, dword[rbx+State.mpKillers+4*0]
		mov   eax, edi
		mov   ecx, edi
		and   eax, 63
	      movzx   eax, byte[rbp+Pos.board+rax]
	       test   edi, edi
		 jz   MovePick_KILLERS
		cmp   edi, dword[rbx+State.ttMove]
		 je   MovePick_KILLERS
		cmp   edi, MOVE_TYPE_EPCAP shl 12
		jae   .special
	       test   eax, eax
		jnz   MovePick_KILLERS
*/
        adr  x2, MovePick_KILLERS
        str  x2, [x21, State.stage]

        ldr  w27, [x21, State.mpKillers + 4*0]
        and  w0, w27, 63
        mov  w1, w27
        add  x6, x20, Pos.board
       ldrb  w0, [x6, x0]
        cbz  w27, MovePick_KILLERS
        ldr  w4, [x21, State.ttMove]
        cmp  w27, w4
        beq  MovePick_KILLERS
        cmp  w27, MOVE_TYPE_EPCAP << 12
        bhs  MovePick_GOOD_CAPTURES.special
       cbnz  w0, MovePick_KILLERS

MovePick_GOOD_CAPTURES.check:
//Display 2, "MovePick_GOOD_CAPTURES.check"
/*
	       call   Move_IsPseudoLegal
	       test   rax, rax
		 jz   MovePick_KILLERS
		mov   eax, edi
		ret
*/
         bl  Move_IsPseudoLegal
        cbz  x0, MovePick_KILLERS
        mov  w0, w27
         br  x29

MovePick_GOOD_CAPTURES.special:
//Display 2, "MovePick_GOOD_CAPTURES.special"
/*
		cmp   edi, MOVE_TYPE_CASTLE shl 12
		jae   .check
*/
        cmp  w27, MOVE_TYPE_CASTLE << 12
        bhs  MovePick_GOOD_CAPTURES.check

MovePick_KILLERS:
//Display 2, "MovePick_KILLERS"
/*
		lea   rdx, [MovePick_KILLERS2]
		mov   qword[rbx+State.stage], rdx
		mov   edi, dword[rbx+State.mpKillers+4*1]
		mov   eax, edi
		mov   ecx, edi
		and   eax, 63
	      movzx   eax, byte[rbp+Pos.board+rax]
	       test   edi, edi
		 jz   MovePick_KILLERS2
		cmp   edi, dword[rbx+State.ttMove]
		 je   MovePick_KILLERS2
		cmp   edi, MOVE_TYPE_EPCAP shl 12
		jae   .special
	       test   eax, eax
		jnz   MovePick_KILLERS2
*/
        adr  x2, MovePick_KILLERS2
        str  x2, [x21, State.stage]
        ldr  w27, [x21, State.mpKillers + 4*1]
        and  w0, w27, 63
        mov  w1, w27
        add  x6, x20, Pos.board
       ldrb  w0, [x6, x0]
        cbz  w27, MovePick_KILLERS2
        ldr  w4, [x21, State.ttMove]
        cmp  w27, w4
        beq  MovePick_KILLERS2
        cmp  w27, MOVE_TYPE_EPCAP << 12
        bhs  MovePick_KILLERS.special
       cbnz  w0, MovePick_KILLERS2

MovePick_KILLERS.check:
//Display 2, "MovePick_KILLERS.check"
/*
	       call   Move_IsPseudoLegal
	       test   rax, rax
		 jz   MovePick_KILLERS2
		mov   eax, edi
		ret
*/
         bl  Move_IsPseudoLegal
        cbz  x0, MovePick_KILLERS2
        mov  w0, w27
         br  x29

MovePick_KILLERS.special:
//Display 2, "MovePick_KILLERS.special"
/*
		cmp   edi, MOVE_TYPE_CASTLE shl 12
		jae   .check
*/
        cmp  w27, MOVE_TYPE_CASTLE << 12
        bhs  MovePick_KILLERS.check

MovePick_KILLERS2:
//Display 2, "MovePick_KILLERS2"
/*
		lea   rdx, [MovePick_QUIET_GEN]
		mov   qword[rbx+State.stage], rdx
		mov   edi, dword[rbx+State.countermove]
		mov   eax, edi
		mov   ecx, edi
		and   eax, 63
	      movzx   eax, byte[rbp+Pos.board+rax]
	       test   edi, edi
		 jz   MovePick_QUIET_GEN
		cmp   edi, dword[rbx+State.ttMove]
		 je   MovePick_QUIET_GEN
		cmp   edi, dword[rbx+State.mpKillers+4*0]
		 je   MovePick_QUIET_GEN
		cmp   edi, dword[rbx+State.mpKillers+4*1]
		 je   MovePick_QUIET_GEN
		cmp   edi, MOVE_TYPE_EPCAP shl 12
		jae   .special
	       test   eax, eax
		jnz   MovePick_QUIET_GEN
*/

        adr  x2, MovePick_QUIET_GEN
        str  x2, [x21, State.stage]
        ldr  w27, [x21, State.countermove]
        and  w0, w27, 63
        mov  w1, w27
        add  x6, x20, Pos.board
       ldrb  w0, [x6, x0]
        cbz  w27, MovePick_QUIET_GEN
        ldr  w4, [x21, State.ttMove]
        cmp  w27, w4
        beq  MovePick_QUIET_GEN
        ldr  w4, [x21, State.mpKillers + 4*0]
        cmp  w27, w4
        beq  MovePick_QUIET_GEN
        ldr  w4, [x21, State.mpKillers + 4*1]
        cmp  w27, w4
        beq  MovePick_QUIET_GEN
        cmp  w27, MOVE_TYPE_EPCAP << 12
        bhs  MovePick_KILLERS2.special
       cbnz  w0, MovePick_QUIET_GEN

MovePick_KILLERS2.check:
//Display 2, "MovePick_KILLERS2.check"
/*
	       call   Move_IsPseudoLegal
	       test   rax, rax
		 jz   MovePick_QUIET_GEN
		mov   eax, edi
		ret
*/
         bl  Move_IsPseudoLegal
        cbz  x0, MovePick_QUIET_GEN
        mov  w0, w27
         br  x29

MovePick_KILLERS2.special:
//Display 2, "MovePick_KILLERS2.special"
/*
		cmp   edi, MOVE_TYPE_CASTLE shl 12
		jae   .check
*/
        cmp  w27, MOVE_TYPE_CASTLE << 12
        bhs  MovePick_KILLERS2.check


MovePick_QUIET_GEN:
//Display 2, "MovePick_QUIET_GEN"
/*
		mov   rdi, qword[rbx+State.endBadCaptures]
		mov   r14, rdi
		mov   r12, rdi
	       call   Gen_Quiets
		mov   r15, rdi
	ScoreQuiets   r12, rdi

        ; partial insertion sort
                lea   r10, [r14+sizeof.ExtMove]
               imul   edx, dword[rbx+State.depth], -4000
                mov   r8, r10
                cmp   r10, r15
                jae   .SortDone
*/
        ldr  x27, [x21, State.endBadCaptures]
        mov  x24, x27
        mov  x22, x27
         bl  Gen_Quiets
        mov  x25, x27
        ScoreQuiets  x22, x27

        add  x10, x24, sizeof.ExtMove
        ldr  w2, [x21, State.depth]
        mov  w4, -4000
        mul  w2, w2, w4
        mov  x8, x10
        cmp  x10, x25
        bhs  MovePick_QUIET_GEN.SortDone

MovePick_QUIET_GEN.SortLoop:
/*
                mov   edi, dword[r8+ExtMove.value]
                mov   r9, qword[r8+ExtMove.move]
                cmp   edi, edx
                 jl   .SortLoopSkip
                mov   rax, qword[r10]
                mov   qword[r8], rax
                mov   rcx, r10
                cmp   r10, r14
                 je   .SortInnerDone
*/
        ldr  w17, [x8, ExtMove.value]
        ldr  x9, [x8, ExtMove.move]
        cmp  w17, w2
        blt  MovePick_QUIET_GEN.SortLoopSkip
        ldr  x0, [x10]
        str  x0, [x8]
        mov  x1, x10
        cmp  x10, x24
        beq  MovePick_QUIET_GEN.SortInnerDone

MovePick_QUIET_GEN.SortInner:
/*
                mov   r11, qword[rcx-sizeof.ExtMove]
                lea   rax, [rcx-sizeof.ExtMove]
                cmp   edi, dword[rcx-sizeof.ExtMove+ExtMove.value]
                jle   .SortInnerDone
                mov   qword[rcx], r11
                mov   rcx, rax
                cmp   rax, r14
                jne   .SortInner
*/
        ldr  x11, [x1, -sizeof.ExtMove]
        add  x0, x1, -sizeof.ExtMove
        ldr  w4, [x1, -sizeof.ExtMove + ExtMove.value]
        cmp  w17, w4
        ble  MovePick_QUIET_GEN.SortInnerDone
        str  x11, [x1]
        mov  x1, x0
        cmp  x0, x24
        bne  MovePick_QUIET_GEN.SortInner

MovePick_QUIET_GEN.SortInnerDone:
/*
                add   r10, sizeof.ExtMove
                mov   qword[rcx], r9
*/
        add  x10, x10, sizeof.ExtMove
        str  x9, [x1]

MovePick_QUIET_GEN.SortLoopSkip:
/*
                add   r8, sizeof.ExtMove
                cmp   r8, r15
                 jb   .SortLoop
*/
        add  x8, x8, sizeof.ExtMove
        cmp  x8, x25
        blo  MovePick_QUIET_GEN.SortLoop

MovePick_QUIET_GEN.SortDone:
/*
		lea   rdx, [MovePick_QUIETS]
		mov   qword[rbx+State.stage], rdx
*/
        adr  x2, MovePick_QUIETS
        str  x2, [x21, State.stage]

MovePick_QUIETS:
//Display 2, "MovePick_QUIETS"
/*
		mov   eax, dword[r14]
		cmp   r14, r15
		jae   .WhileDone
               test   esi, dword[r14+ExtMove.value]
                 js   .WhileDone
		add   r14, sizeof.ExtMove
		cmp   eax, dword[rbx+State.ttMove]
		 je   MovePick_QUIETS
		cmp   eax, dword[rbx+State.mpKillers+4*0]
		 je   MovePick_QUIETS
		cmp   eax, dword[rbx+State.mpKillers+4*1]
		 je   MovePick_QUIETS
		cmp   eax, dword[rbx+State.countermove]
		 je   MovePick_QUIETS
		ret

*/
        ldr  w0, [x24]
        cmp  x24, x25
        bhs  MovePick_QUIETS.WhileDone
        ldr  w4, [x24, ExtMove.value]
        and  w4, w4, w26
       tbnz  w4, 31, MovePick_QUIETS.WhileDone
        add  x24, x24, sizeof.ExtMove
        ldr  w4, [x21, State.ttMove]
        cmp  w0, w4
        beq  MovePick_QUIETS
        ldr  w4, [x21, State.mpKillers + 4*0]
        cmp  w0, w4
        beq  MovePick_QUIETS
        ldr  w4, [x21, State.mpKillers + 4*1]
        cmp  w0, w4
        beq  MovePick_QUIETS
        ldr  w4, [x21, State.countermove]
        cmp  w0, w4
        beq  MovePick_QUIETS
         br  x29

MovePick_QUIETS.WhileDone:
//Display 2, "MovePick_QUIETS.WhileDone"
/*
		lea   rdx, [MovePick_BAD_CAPTURES]
		mov   qword[rbx+State.stage], rdx
		mov   r14, qword[rbx-1*sizeof.State+State.endMoves]
*/
        adr  x2, MovePick_BAD_CAPTURES
        str  x2, [x21, State.stage]
        ldr  x24, [x21, -1*sizeof.State + State.endMoves]

MovePick_BAD_CAPTURES:
//Display 2, "MovePick_BAD_CAPTURES"
/*
		mov   eax, dword[r14]
		cmp   r14, qword[rbx+State.endBadCaptures]
		jae   .IfDone
		add   r14, sizeof.ExtMove
		ret
*/
        ldr  w0, [x24]
        ldr  x4, [x21, State.endBadCaptures]
        cmp  x24, x4
        bhs  MovePick_BAD_CAPTURES.IfDone
        add  x24, x24, sizeof.ExtMove
         br  x29

MovePick_BAD_CAPTURES.IfDone:
//Display 2, "MovePick_BAD_CAPTURES.IfDone"
/*
		xor   eax, eax
		ret
*/
        mov  w0, 0
         br  x29

MovePick_EVASIONS:
//Display 2, "MovePick_EVASIONS"
/*
		mov   r15, qword[rbx-1*sizeof.State+State.endMoves]
		mov   eax, dword[rbx+State.ttMove]
		lea   rdx, [MovePick_ALL_EVASIONS]
		mov   qword[rbx+State.stage], rdx
		ret
*/
        ldr  x25, [x21, -1*sizeof.State + State.endMoves]
        ldr  w0, [x21, State.ttMove]
        adr  x2, MovePick_ALL_EVASIONS
        str  x2, [x21, State.stage]
         br  x29

MovePick_ALL_EVASIONS:
//Display 2, "MovePick_ALL_EVASIONS"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_Evasions
		mov   r15, rdi
		mov   r12, r14
      ScoreEvasions   r12, r15
		lea   rdx, [MovePick_REMAINING]
		mov   qword[rbx+State.stage], rdx
		jmp   MovePick_REMAINING
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
         bl  Gen_Evasions
        mov  x25, x27
        mov  x22, x24
        ScoreEvasions x22, x25
        adr  x2, MovePick_REMAINING
        str  x2, [x21, State.stage]
          b  MovePick_REMAINING


MovePick_QSEARCH_WITH_CHECKS:
//Display 2, "MovePick_QSEARCH_WITH_CHECKS"
/*
		mov   r15, qword[rbx-1*sizeof.State+State.endMoves]
		mov   eax, dword[rbx+State.ttMove]
		lea   rdx, [MovePick_QCAPTURES_CHECKS_GEN]
		mov   qword[rbx+State.stage], rdx
		ret
*/
        ldr  x25, [x21, -1*sizeof.State + State.endMoves]
        ldr  w0, [x21, State.ttMove]
        adr  x2, MovePick_QCAPTURES_CHECKS_GEN
        str  x2, [x21, State.stage]
         br  x29

MovePick_QCAPTURES_CHECKS_GEN:
//Display 2, "MovePick_QCAPTURES_CHECKS_GEN"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_Captures
		mov   r15, rdi
		mov   r13, r14
      ScoreCaptures   r13, rdi
		lea   rdx, [MovePick_QCAPTURES_CHECKS]
		mov   qword[rbx+State.stage], rdx
		jmp   MovePick_QCAPTURES_CHECKS
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
         bl  Gen_Captures
        mov  x25, x27
        mov  x23, x24
        ScoreCaptures x23, x27
        adr  x2, MovePick_QCAPTURES_CHECKS
        str  x2, [x21, State.stage]
          b  MovePick_QCAPTURES_CHECKS

MovePick_QSEARCH_WITHOUT_CHECKS:
//Display 2, "MovePick_QSEARCH_WITHOUT_CHECKS"
/*
		mov   r15, qword[rbx-1*sizeof.State+State.endMoves]
		mov   eax, dword[rbx+State.ttMove]
		lea   rdx, [MovePick_QCAPTURES_NO_CHECKS_GEN]
		mov   qword[rbx+State.stage], rdx
		ret
*/
        ldr  x25, [x21, -1*sizeof.State + State.endMoves]
        ldr  w0, [x21, State.ttMove]
        adr  x2, MovePick_QCAPTURES_NO_CHECKS_GEN
        str  x2, [x21, State.stage]
         br  x29

MovePick_QCAPTURES_NO_CHECKS_GEN:
//Display 2, "MovePick_QCAPTURES_NO_CHECKS_GEN"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_Captures
		mov   r15, rdi
		mov   r13, r14
      ScoreCaptures   r13, rdi
		lea   rdx, [MovePick_REMAINING]
		mov   qword[rbx+State.stage], rdx
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
         bl  Gen_Captures
        mov  x25, x27
        mov  x23, x24
        ScoreCaptures  x23, x27
        adr  x2, MovePick_REMAINING
        str  x2, [x21, State.stage]

MovePick_REMAINING:
//Display 2, "MovePick_REMAINING"
/*
		cmp   r14, r15
		jae   .WhileDone
	   PickBest   r14, r13, r15
		mov   eax, ecx
		cmp   ecx, dword[rbx+State.ttMove]
		 je   MovePick_REMAINING
		ret
*/
        cmp  x24, x25
        bhs  MovePick_REMAINING.WhileDone
        PickBest  x24, x23, x25
        mov  w0, w1
        ldr  w4, [x21, State.ttMove]
        cmp  w1, w4
        beq  MovePick_REMAINING
         br  x29

MovePick_REMAINING.WhileDone:
//Display 2, "MovePick_REMAINING.WhileDone"
/*
		xor   eax, eax
		ret
*/
        mov  w0, 0
         br  x29


MovePick_QCAPTURES_CHECKS:
//Display 2, "MovePick_QCAPTURES_CHECKS"
/*
		cmp   r14, r15
		jae   .WhileDone
	   PickBest   r14, r13, r15
		mov   eax, ecx
		cmp   ecx, dword[rbx+State.ttMove]
		 je   MovePick_QCAPTURES_CHECKS
		ret
*/
        cmp  x24, x25
        bhs  MovePick_QCAPTURES_CHECKS.WhileDone
        PickBest  x24, x23, x25
        mov  w0, w1
        ldr  w4, [x21, State.ttMove]
        cmp  w1, w4
        beq  MovePick_QCAPTURES_CHECKS
         br  x29

MovePick_QCAPTURES_CHECKS.WhileDone:
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_QuietChecks
		mov   r15, rdi
		lea   rdx, [MovePick_CHECKS]
		mov   qword[rbx+State.stage], rdx
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
         bl  Gen_QuietChecks
        mov  x25, x27
        adr  x2, MovePick_CHECKS
        str  x2, [x21, State.stage]

MovePick_CHECKS:
//Display 2, "MovePick_CHECKS"
/*
		mov   eax, dword[r14]
		cmp   r14, r15
		jae   .IfDone
		add   r14, sizeof.ExtMove
		cmp   eax, dword[rbx+State.ttMove]
		 je   MovePick_CHECKS
		ret
*/
        ldr  w0, [x24]
        cmp  x24, x25
        bhs  MovePick_CHECKS.IfDone
        add  x24, x24, sizeof.ExtMove
        ldr  w4, [x21, State.ttMove]
        cmp  w0, w4
        beq  MovePick_CHECKS
         br  x29

MovePick_CHECKS.IfDone:
/*
		xor   eax, eax
		ret
*/
        mov  w0, 0
         br  x29


MovePick_RECAPTURES_GEN:
//Display 2, "MovePick_RECAPTURES_GEN"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_Captures
		mov   r15, rdi
		mov   r13, r14
      ScoreCaptures   r13, rdi
		lea   rdx, [MovePick_RECAPTURES]
		mov   qword[rbx+State.stage], rdx
*/
        ldr  x27, [x21, -1*sizeof.State + State.endMoves]
        mov  x24, x27
         bl  Gen_Captures
        mov  x25, x27
        mov  x23, x24
        ScoreCaptures  x23, x27
        adr  x2, MovePick_RECAPTURES
        str  x2, [x21, State.stage]


MovePick_RECAPTURES:
//Display 2, "MovePick_RECAPTURES"
/*
		cmp   r14, r15
		 je   .WhileDone
	   PickBest   r14, r13, r15
		mov   eax, ecx
		and   ecx, 63
		cmp   ecx, dword[rbx+State.recaptureSquare]
		jne   MovePick_RECAPTURES
		ret
*/
        cmp  x24, x25
        beq  MovePick_RECAPTURES.WhileDone
        PickBest  x24, x23, x25
        mov  w0, w1
        and  w1, w1, 63
        ldr  w4, [x21, State.recaptureSquare]
        cmp  w1, w4
        bne  MovePick_RECAPTURES
         br  x29

MovePick_RECAPTURES.WhileDone:
/*
		xor   eax, eax
		ret
*/
        mov  w0, 0
         br  x29



MovePick_PROBCUT:
//Display 2, "MovePick_PROBCUT"
/*
		mov   r15, qword[rbx-1*sizeof.State+State.endMoves]
		mov   eax, dword[rbx+State.ttMove]
		lea   rdx, [MovePick_PROBCUT_GEN]
		mov   qword[rbx+State.stage], rdx
		ret
*/
        ldr  x25, [x21, -1*sizeof.State + State.endMoves]
        ldr  w0, [x21, State.ttMove]
        adr  x2, MovePick_PROBCUT_GEN
        str  x2, [x21, State.stage]
         br  x29

MovePick_PROBCUT_GEN:
//Display 2, "MovePick_PROBCUT_GEN"
/*
		mov   rdi, qword[rbx-1*sizeof.State+State.endMoves]
		mov   r14, rdi
	       call   Gen_Captures
		mov   r15, rdi
		mov   r13, r14
      ScoreCaptures   r13, rdi
		lea   rdx, [MovePick_PROBCUT_2]
		mov   qword[rbx+State.stage], rdx
*/
        ldr  x27, [x21, -1*sizeof.State+State.endMoves]
        mov  x24, x27
         bl  Gen_Captures
        mov  x25, x27
        mov  x23, x24
        ScoreCaptures  x23, x27
        adr  x2, MovePick_PROBCUT_2
        str  x2, [x21, State.stage]

MovePick_PROBCUT_2:
//Display 2, "MovePick_PROBCUT_2"
/*
		cmp   r14, r15
		 je   .WhileDone
	   PickBest   r14, r13, r15
		mov   eax, ecx
		mov   edi, ecx
		cmp   ecx, dword[rbx+State.ttMove]
		 je   MovePick_PROBCUT_2
		mov   edx, dword[rbx+State.threshold]
	       call   SeeTestGe
	       test   eax, eax
		 jz   MovePick_PROBCUT_2
		mov   eax, edi
		ret
*/
        cmp  x24, x25
        beq  MovePick_PROBCUT_2.WhileDone
        PickBest  x24, x23, x25
        mov  w0, w1
        mov  w27, w1
        ldr  w4, [x21, State.ttMove]
        cmp  w1, w4
        beq  MovePick_PROBCUT_2
        ldr  w2, [x21, State.threshold]
         bl  SeeTestGe
        cbz  w0, MovePick_PROBCUT_2
        mov  w0, w27
         br  x29

MovePick_PROBCUT_2.WhileDone:
/*
		xor   eax, eax
		ret
*/
        mov  w0, 0
         br  x29

