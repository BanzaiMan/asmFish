/*
macro UpdateCmStats ss, offset, bonus32, absbonus, t1 {
	; bonus32 is 32*bonus
	; absbonus is abs(bonus)
	; clobbers rax, rcx, rdx, t1
local ..over1, ..over2, ..over3
		mov   t1, qword[ss-1*sizeof.State+State.counterMoves]
		cmp   dword[ss-1*sizeof.State+State.currentMove], 1
		 jl   ..over1
	apply_bonus   (t1+4*(offset)), bonus32, absbonus, 936
..over1:
		mov   t1, qword[ss-2*sizeof.State+State.counterMoves]
		cmp   dword[ss-2*sizeof.State+State.currentMove], 1
		 jl   ..over2
	apply_bonus   (t1+4*(offset)), bonus32, absbonus, 936
..over2:
		mov   t1, qword[ss-4*sizeof.State+State.counterMoves]
		cmp   dword[ss-4*sizeof.State+State.currentMove], 1
		 jl   ..over3
	apply_bonus   (t1+4*(offset)), bonus32, absbonus, 936
..over3:
}
*/

.macro UpdateCmStats ssreg, ssoff, offset, bonus32, absbonus, t1
        add  x4, \ssreg, \ssoff - 1*sizeof.State
        ldr  \t1, [x4, State.counterMoves]
        ldr  w4, [x4, State.currentMove]
        cmp  w4, 1
        blt  UpdateCmStats.over1\@
        ldr  w0, [\t1, \offset, lsl 2]
        mov  w1, 936
        ApplyBonus  w0, w2, \bonus32, \absbonus, w1
        str  w0, [\t1, \offset, lsl 2]
UpdateCmStats.over1\@:
        add  x4, \ssreg, \ssoff - 2*sizeof.State
        ldr  \t1, [x4, State.counterMoves]
        ldr  w4, [x4, State.currentMove]
        cmp  w4, 1
        blt  UpdateCmStats.over2\@
        ldr  w0, [\t1, \offset, lsl 2]
        mov  w1, 936
        ApplyBonus  w0, w2, \bonus32, \absbonus, w1
        str  w0, [\t1, \offset, lsl 2]
UpdateCmStats.over2\@:
        add  x4, \ssreg, \ssoff - 4*sizeof.State
        ldr  \t1, [x4, State.counterMoves]
        ldr  w4, [x4, State.currentMove]
        cmp  w4, 1
        blt  UpdateCmStats.over3\@
        ldr  w0, [\t1, \offset, lsl 2]
        mov  w1, 936
        ApplyBonus  w0, w2, \bonus32, \absbonus, w1
        str  w0, [\t1, \offset, lsl 2]
UpdateCmStats.over3\@:

.endm

/*
macro UpdateStats move, quiets, quietsCnt, bonus32, absbonus, prevOffset {

	; clobbers rax, rcx, rdx, r8, r9
	; it also might clobber rsi and change the sign of bonus32

local ..DontUpdateKillers, ..DontUpdateOpp, ..BonusTooBig, ..NextQuiet, ..Return


if DEBUG
		mov   eax, dword[rbx-1*sizeof.State+State.currentMove]
		and   eax, 63
	      movzx   ecx, byte[rbp+Pos.board+rax]
		shl   ecx, 6
		add   eax, ecx
	     Assert   e, prevOffset, rax, 'assertion prevOffset = offset of [piece_on(prevSq),prevSq] failed in UpdateStats'
end if
*/
.macro UpdateStats move, quiets, usequiets, quietsCnt, bonus32, absbonus, prevOffset
/*
		mov   eax, dword[rbx+State.killers+4*0]
		cmp   eax, move
		 je   ..DontUpdateKillers
		mov   dword[rbx+State.killers+4*1], eax
		mov   dword[rbx+State.killers+4*0], move
*/

        ldr  w0, [x21, State.killers + 4*0]
        cmp  w0, \move
        beq  UpdateStats.DontUpdateKillers\@
        str  w0, [x21, State.killers + 4*1]
        str  \move, [x21, State.killers + 4*0]

UpdateStats.DontUpdateKillers\@:
/*
		cmp   dword[rbx-1*sizeof.State+State.currentMove], 1
		 jl   ..DontUpdateOpp
		mov   r8, qword[rbp+Pos.counterMoves]
		mov   dword[r8+4*prevOffset], move
*/
        ldr  w4, [x21, -1*sizeof.State + State.currentMove]
        cmp  w4, 1
        blt  UpdateStats.DontUpdateOpp\@
        ldr  x8, [x20, Pos.counterMoves]
        str  \move, [x8, \prevOffset, lsl 2]
UpdateStats.DontUpdateOpp\@:
/*
	       imul   bonus32, absbonus, 32
		cmp   absbonus, 324
		jae   ..BonusTooBig

		mov   eax, move
		and   eax, 64*64-1
		mov   r8d, dword[rbp+Pos.sideToMove]
		shl   r8d, 12+2
		add   r8, qword[rbp+Pos.history]
		lea   r8, [r8+4*rax]
	apply_bonus   r8, bonus32, absbonus, 324
*/
        lsl  \bonus32, \absbonus, 5
        cmp  \absbonus, 324
        bhs  UpdateStats.BonusTooBig\@

        and  w0, \move, 64*64-1
        ldr  w8, [x20, Pos.sideToMove]
        ldr  x4, [x20, Pos.history]
        add  x8, x4, x8, lsl 14
        add  x8, x8, x0, lsl 2

        ldr  w0, [x8]
        mov  w1, 324
        ApplyBonus  w0, w2, \bonus32, \absbonus, w1
        str  w0, [x8]

/*
		mov   r9d, move
		and   r9d, 63
		mov   eax, move
		shr   eax, 6
		and   eax, 63
	      movzx   eax, byte[rbp+Pos.board+rax]
		shl   eax, 6
		add   r9d, eax
      UpdateCmStats   (rbx-0*sizeof.State), r9, bonus32, absbonus, r8
*/
        and  w9, \move, 63
       ubfx  w0, \move, 6, 6
        add  x6, x20, Pos.board
       ldrb  w0, [x6, x0]
        add  w9, w9, w0, lsl 6
        UpdateCmStats  x21, -0*sizeof.State, x9, \bonus32, \absbonus, x8

/*
if quiets eq 0
else
	; Decrease all the other played quiet moves
		neg   bonus32
		xor   esi, esi
		cmp   esi, quietsCnt
		 je   ..Return
*/
 .if \usequiets
        neg  \bonus32, \bonus32
        mov  w16, 0
        cbz  \quietsCnt, UpdateStats.Return\@

UpdateStats.NextQuiet\@:
/*
		mov   edx, dword[quiets+4*rsi]
		mov   ecx, edx
		mov   eax, edx

		and   edx, 64*64-1
		mov   r8d, dword[rbp+Pos.sideToMove]
		shl   r8d, 12+2
		add   r8, qword[rbp+Pos.history]
		lea   r8, [r8+4*rdx]

		and   ecx, 63
		shr   eax, 6
		and   eax, 63
	      movzx   eax, byte[rbp+Pos.board+rax]
		shl   eax, 6
		lea   r9d, [rax+rcx]

	apply_bonus   r8, bonus32, absbonus, 324

      UpdateCmStats   (rbx-0*sizeof.State), r9, bonus32, absbonus, r8
*/
        ldr  w2, [\quiets, x16, lsl 2]
       ubfx  w0, w2, 6, 6
        and  w1, w2, 63
        and  w2, w2, 64*64-1
        ldr  w8, [x20, Pos.sideToMove]
        ldr  x4, [x20, Pos.history]
        add  x8, x4, x8, lsl 14
        add  x8, x8, x2, lsl 2

        add  x6, x20, Pos.board
       ldrb  w0, [x6, x0]
        add  w9, w1, w0, lsl 6

        ldr  w0, [x8]
        mov  w1, 324
        ApplyBonus  w0, w2, \bonus32, \absbonus, w1
        str  w0, [x8]

        UpdateCmStats  x21, -0*sizeof.State, x9, \bonus32, \absbonus, x8

/*
		add   esi, 1
		cmp   esi, quietsCnt
		 jb   ..NextQuiet

end if
*/
        add  w16, w16, 1
        cmp  w16, \quietsCnt
        blo  UpdateStats.NextQuiet\@
 .endif
UpdateStats.BonusTooBig\@:
UpdateStats.Return\@:
/*
}
*/
.endm

