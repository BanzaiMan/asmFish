/*
// Test whether see(m) >= value.
int see_test(Pos *pos, Move m, int value)
{
  if (type_of_m(m) == CASTLING)
    return 0 >= value;

  Square from = from_sq(m), to = to_sq(m);
  Bitboard occ = pieces();

  int swap = PieceValue[MG][piece_on(to)] - value;
  if (type_of_m(m) == ENPASSANT) {
    assert(pos_stm() == color_of(piece_on(from)));
    occ ^= sq_bb(to - pawn_push(pos_stm())); // Remove the captured pawn
    swap += PieceValue[MG][PAWN];
  }
  if (swap < 0)
    return 0;

  swap = PieceValue[MG][piece_on(from)] - swap;
  if (swap <= 0)
    return 1;

  occ ^= sq_bb(from) ^ sq_bb(to);
  Bitboard attackers = attackers_to_occ(to, occ) & occ;
  int stm = color_of(piece_on(from)) ^ 1;
  int res = 1;
  Bitboard stmAttackers;

  while (1) {
    stmAttackers = attackers & pieces_c(stm);
    if (   (stmAttackers & pinned_pieces(pos, stm))
        && (pos->st->pinnersForKing[stm] & occ) == pos->st->pinnersForKing[stm])
      stmAttackers &= ~pinned_pieces(pos, stm);
    if (!stmAttackers) break;
    Bitboard bb;
    int captured;
    for (captured = PAWN; captured < KING; captured++)
      if ((bb = stmAttackers & pieces_p(captured)))
        break;
    if (captured == KING) {
      stm ^= 1;
      stmAttackers = attackers & pieces_c(stm);
      // Introduce error also present in official Stockfish.
      if (   (stmAttackers & pinned_pieces(pos, stm))
          && (pos->st->pinnersForKing[stm] & occ) == pos->st->pinnersForKing[stm])
        stmAttackers &= ~pinned_pieces(pos, stm);
      return stmAttackers ? res : res ^ 1;
    }
    swap = PieceValue[MG][captured] - swap;
    res ^= 1;
    // Next line tests alternately for swap < 0 and swap <= 0.
    if (swap < res) return res;
    occ ^= (bb & -bb);
    if (captured & 1) // PAWN, BISHOP, QUEEN
      attackers |= attacks_bb_bishop(to, occ) & pieces_pp(BISHOP, QUEEN);
    if (captured & 4) // ROOK, QUEEN
      attackers |= attacks_bb_rook(to, occ) & pieces_pp(ROOK, QUEEN);
    attackers &= occ;
    stm ^= 1;
  }

  return res;
}
*/


SeeTestGe:
// in: x20 address of Pos
//     x21 address of State
//     w1  capture move
//     w2  value
// out: w0 = 1 if  see >= w2
//      w0 = 0 if  see <  w2

from         .req x8
from_d       .req w8
to           .req x9
to_d         .req w9
stm	     .req x16
stm_d	     .req w16
attackers    .req x15
occupied     .req x14
bb	     .req x13
stmAttackers .req x12
swap	     .req w2
res	     .req w0

       ubfx  w8, w1, 6, 6
        and  w9, w1, 63

SeeTestGe.HaveFromTo:
        ldr  occupied, [x20, Pos.typeBB + 8*White]
        ldr  x4, [x20, Pos.typeBB + 8*Black]
        orr  occupied, occupied, x4
        mov  x4, 1
        lsl  x4, x4, from
        bic  occupied, occupied, x4
        mov  x4, 1
        lsl  x4, x4, to
        eor  occupied, occupied, x4

// x10 = bishops + queens
// x11 = rooks + queens
        ldr  x17, [x20, Pos.typeBB + 8*Queen]
        ldr  x10, [x20, Pos.typeBB + 8*Bishop]
        ldr  x11, [x20, Pos.typeBB + 8*Rook]
        orr  x10, x10, x17
        orr  x11, x11, x17

        neg  swap, swap
        mov  res, 0
        cmp  w1, MOVE_TYPE_EPCAP << 12
        bhs  SeeTestGe.Special

        add  x6, x20, Pos.board
       ldrb  w1, [x6, to]
        lea  x6, PieceValue_MG
        ldr  w4, [x6, x1, lsl 2]
        add  swap, swap, w4
        cmp  swap, res
        blt  SeeTestGe.Return

SeeTestGe.EpCaptureRet:
// at this point .from register x8 is free
//  x17, x1 are also free
        eor  res, res, 1
        neg  swap, swap
        add  x6, x20, Pos.board
       ldrb  stm_d, [x6, from]
        lea  x6, PieceValue_MG
        ldr  w4, [x6, stm, lsl 2]
        add  swap, swap, w4
        and  stm_d, stm_d, 8
        cmp  swap, res
        blt  SeeTestGe.Return

        lea  x6, KingAttacks
        ldr  attackers, [x6, to, lsl 3]
        ldr  x4, [x20, Pos.typeBB + 8*King]
        and  attackers, attackers, x4
        lea  x6, BlackPawnAttacks
        ldr  x17, [x6, to, lsl 3]
        ldr  x4, [x20, Pos.typeBB + 8*White]
        and  x17, x17, x4
        ldr  x4, [x20, Pos.typeBB + 8*Pawn]
        and  x17, x17, x4
        orr  attackers, attackers, x17
        lea  x6, WhitePawnAttacks
        ldr  x17, [x6, to, lsl 3]
        ldr  x4, [x20, Pos.typeBB + 8*Black]
        and  x17, x17, x4
        ldr  x4, [x20, Pos.typeBB + 8*Pawn]
        and  x17, x17, x4
        orr  attackers, attackers, x17

        lea  x6, KnightAttacks
        ldr  x17, [x6, to, lsl 3]
        ldr  x4, [x20, Pos.typeBB + 8*Knight]
        and  x17, x17, x4
        orr  attackers, attackers, x17
        RookAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x11
        orr  attackers, attackers, x17
        BishopAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x10
        orr  attackers, attackers, x17


SeeTestGe.Loop:

        eor  stm_d, stm_d, 8
        and  attackers, attackers, occupied

        add  x6, x20, Pos.typeBB
        ldr  stmAttackers, [x6, stm]
       ands  stmAttackers, stmAttackers, attackers
        beq  SeeTestGe.Return
        add  x6, x21, State.blockersForKing
        ldr  x4, [x6, stm]
        tst  stmAttackers, x4
        beq  1f

        add  x6, x21, State.pinnersForKing
        ldr  x17, [x6, stm]
        and  x17, x17, occupied
        add  x6, x21, State.pinnersForKing
        ldr  x4, [x6, stm]
        cmp  x17, x4
        bne  1f

        add  x6, x21, State.blockersForKing
        ldr  x1, [x6, stm]
        mvn  x1, x1
       ands  stmAttackers, stmAttackers, x1
        beq  SeeTestGe.Return
1:

        neg  swap, swap
        eor  res, res, 1

        ldr  bb, [x20, Pos.typeBB + 8*Pawn]
       ands  bb, bb, stmAttackers
        bne  SeeTestGe.FoundPawn

        ldr  bb, [x20, Pos.typeBB + 8*Knight]
       ands  bb, bb, stmAttackers
        bne  SeeTestGe.FoundKnight

        ldr  bb, [x20, Pos.typeBB + 8*Bishop]
       ands  bb, bb, stmAttackers
        bne  SeeTestGe.FoundBishop

        ldr  bb, [x20, Pos.typeBB + 8*Rook]
       ands  bb, bb, stmAttackers
        bne  SeeTestGe.FoundRook

        ldr  bb, [x20, Pos.typeBB + 8*Queen]
       ands  bb, bb, stmAttackers
        bne  SeeTestGe.FoundQueen

SeeTestGe.FoundKing:
        eor  stm_d, stm_d, 8
        add  x6, x20, Pos.typeBB
        ldr  stmAttackers, [x6, stm]
       ands  stmAttackers, stmAttackers, attackers
// .res has already been flipped so we must do
//    return stmAttackers ? res^1 : res;
       cinc  w0, w0, ne
        and  w0, w0, 1
        

SeeTestGe.Return:
        ret

SeeTestGe.FoundQueen:
        add  swap, swap, QueenValueMg
        cmp  swap, res
        blt  SeeTestGe.Return

        neg  x8, bb
        and  bb, bb, x8
        eor  occupied, occupied, bb
        BishopAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x10
        orr  attackers, attackers, x17
        RookAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x11
        orr  attackers, attackers, x17
          b  SeeTestGe.Loop

SeeTestGe.FoundRook:
        add  swap, swap, RookValueMg
        cmp  swap, res
        blt  SeeTestGe.Return

        neg  x8, bb
        and  bb, bb, x8
        eor  occupied, occupied, bb
        RookAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x11
        orr  attackers, attackers, x17
          b  SeeTestGe.Loop

SeeTestGe.FoundBishop:
        add  swap, swap, BishopValueMg - PawnValueMg

SeeTestGe.FoundPawn:
        add  swap, swap, PawnValueMg
        cmp  swap, res
        blt  SeeTestGe.Return

        neg  x1, bb
        and  bb, bb, x1
        eor  occupied, occupied, bb
        BishopAttacks  x17, to, occupied, x8, x4
        and  x17, x17, x10
        orr  attackers, attackers, x17
          b  SeeTestGe.Loop

SeeTestGe.FoundKnight:
        add  swap, swap, KnightValueMg
        cmp  swap, res
        blt  SeeTestGe.Return

        neg  x1, bb
        and  bb, bb, x1
        eor  occupied, occupied, bb
          b  SeeTestGe.Loop

SeeTestGe.Special:
// if we get here, .swap = -value
//            and  .res = 0
        cmp  w1, MOVE_TYPE_CASTLE << 12
        bhs  SeeTestGe.Castle
        ldr  w1, [x20, Pos.sideToMove]
        add  x1, to, x1, lsl 4
        sub  w1, w1, 8
        mov  x4, 1
        lsl  x4, x4, x1
        bic  occupied, occupied, x4
        add  swap, swap, PawnValueMg
        cmp  swap, res
        bge  SeeTestGe.EpCaptureRet

SeeTestGe.ReturnSpecial:
        ret

SeeTestGe.Castle:
// return 0 <= swap
        cmp  swap, 0
       cset  res, ge
          b  SeeTestGe.ReturnSpecial

.unreq from
.unreq from_d
.unreq to
.unreq to_d
.unreq stm
.unreq stm_d
.unreq attackers
.unreq occupied
.unreq bb
.unreq stmAttackers
.unreq swap
.unreq res
