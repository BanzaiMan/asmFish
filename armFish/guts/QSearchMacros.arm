.macro QSearch PvNode, InCheck

QSearch.tte                     = 0
QSearch.ltte                    = 1*sizeof.rq + QSearch.tte
QSearch.searchFxn               = 1*sizeof.rq + QSearch.ltte
QSearch.stage                   = 1*sizeof.rq + QSearch.searchFxn
QSearch.ttMove                  = 1*sizeof.rq + QSearch.stage
QSearch.ttValue                 = 1*sizeof.rd + QSearch.ttMove
QSearch.ttDepth                 = 1*sizeof.rd + QSearch.ttValue
QSearch.move                    = 1*sizeof.rd + QSearch.ttDepth
QSearch.excludedMove            = 1*sizeof.rd + QSearch.move
QSearch.bestMove                = 1*sizeof.rd + QSearch.excludedMove
QSearch.ext                     = 1*sizeof.rd + QSearch.bestMove
QSearch.newDepth                = 1*sizeof.rd + QSearch.ext
QSearch.predictedDepth          = 1*sizeof.rd + QSearch.newDepth
QSearch.moveCount               = 1*sizeof.rd + QSearch.predictedDepth
QSearch.oldAlpha                = 1*sizeof.rd + QSearch.moveCount
QSearch.alpha                   = 1*sizeof.rd + QSearch.oldAlpha
QSearch.beta                    = 1*sizeof.rd + QSearch.alpha
QSearch.depth                   = 1*sizeof.rd + QSearch.beta
QSearch.bestValue               = 1*sizeof.rd + QSearch.depth
QSearch.value	                = 1*sizeof.rd + QSearch.bestValue
QSearch.eval	                = 1*sizeof.rd + QSearch.value
QSearch.nullValue               = 1*sizeof.rd + QSearch.eval
QSearch.futilityValue           = 1*sizeof.rd + QSearch.nullValue
QSearch.futilityBase            = 1*sizeof.rd + QSearch.futilityValue
QSearch.inCheck                 = 1*sizeof.rd + QSearch.futilityBase
QSearch.singularExtensionNode   = 1*sizeof.rb + 1*sizeof.rb + QSearch.inCheck
QSearch.improving               = 1*sizeof.rb + QSearch.singularExtensionNode
QSearch.captureOrPromotion      = 1*sizeof.rb + QSearch.improving
QSearch.dangerous               = 1*sizeof.rb + QSearch.captureOrPromotion
QSearch.doFullDepthSearch       = 1*sizeof.rb + QSearch.dangerous
QSearch.cutNode                 = 1*sizeof.rb + QSearch.doFullDepthSearch
QSearch.ttHit                   = 1*sizeof.rb + QSearch.cutNode
  .if \PvNode == 1
QSearch.pv                      = 1*sizeof.rb + 7*sizeof.rb + QSearch.ttHit
QSearch.lend                    = (MAX_PLY+1)*sizeof.rd + QSearch.pv
  .else
QSearch.lend                    = 1*sizeof.rb + 7*sizeof.rb + QSearch.ttHit
  .endif
QSearch.localsize = (QSearch.lend+15) & -16

                stp  x21, x30, [sp, -16]!
                stp  x26, x27, [sp, -16]!
                stp  x22, x23, [sp, -16]!
                stp  x24, x25, [sp, -16]!
                sub  sp, sp, QSearch.localsize

  .if \PvNode == 1
    .if \InCheck == 1
Display 2, "QSearch<1,1>(alpha=%i1, beta=%i2, depth=%i8) called\n"
    .else
Display 2, "QSearch<1,0>(alpha=%i1, beta=%i2, depth=%i8) called\n"
    .endif
  .else
    .if \InCheck == 1
Display 2, "QSearch<0,1>(alpha=%i1, beta=%i2, depth=%i8) called\n"
    .else
Display 2, "QSearch<0,0>(alpha=%i1, beta=%i2, depth=%i8) called\n"
    .endif
  .endif

                str  w1, [sp, QSearch.alpha]
                str  w2, [sp, QSearch.beta]
                str  w8, [sp, QSearch.depth]

               ldrb  w0, [x21, -1*sizeof.State + State.ply]
                add  w0, w0, 1
                mov  w2, 0
  .if \PvNode == 1
                add  x8, sp, QSearch.pv
                ldr  x9, [x21, State.pv]
                str  w1, [sp, QSearch.oldAlpha]
                str  x8, [x21, 1*sizeof.State + State.pv]
                str  w2, [x9]
  .endif
                mov  w4, 2
                str  w4, [sp, QSearch.moveCount]
                str  w2, [sp, QSearch.bestMove]
                str  w2, [x21, State.currentMove]
               strb  w0, [x21, State.ply]

        // check for instant draw or max ply
               ldrh  w2, [x21, State.rule50]
               ldrh  w1, [x21, State.pliesFromNull]
                ldr  x8, [x21, State.key]
                cmp  w0, MAX_PLY
                bhs  QSearch.AbortSearch_PlyBigger\@

        // ss->ply < MAX_PLY holds at this point, so if we should
        //   go to .AbortSearch_PlySmaller if a draw is detected
          PosIsDraw  QSearch.AbortSearch_PlySmaller\@, QSearch.CheckDraw_Cold\@, QSearch.CheckDraw_ColdRet\@

  .if \InCheck == 1
                mov  w22, DEPTH_QS_CHECKS
                str  w22, [sp, QSearch.ttDepth]
  .else
                mov  w0, DEPTH_QS_CHECKS
                mov  w22, DEPTH_QS_NO_CHECKS
                ldr  w4, [sp, QSearch.depth]
                cmp  w0, w4
               csel  w22, w0, w22, le
                str  w22, [sp, QSearch.ttDepth]
  .endif

        // transposition table lookup
                ldr  x1, [x21, State.key]
                sub  w22, w22, 1
                 bl  MainHash_Probe

                str  x0, [sp, QSearch.tte]
                str  x1, [sp, QSearch.ltte]
               strb  w2, [sp, QSearch.ttHit]
                asr  x27, x1, 48
               sbfx  w0, w1, 8, 8
                sub  w22, w22, w0
                asr  w22, w22, 31
        // w22 = 0 if tte.depth <  ttDepth
        //     =-1 if tte.depth >= ttDepth
                lsr  x1, x1, 16
                mov  w23, w2
               ubfx  w1, w1, 0, 16
                str  w1, [sp, QSearch.ttMove]
                str  w27, [sp, QSearch.ttValue]

                mov  w4, VALUE_MATE_IN_MAX_PLY
                add  w8, w27, w4
                cbz  w2, QSearch.DontReturnTTValue\@

                mov  w0, w27
                ldr  w4, [sp, QSearch.beta]
                sub  w0, w0, w4
                asr  w0, w0, 31
        // w0 = 0 if ttValue<beta
        //    =-1 if ttvalue>=beta

                mov  w4, VALUE_NONE
                cmp  w27, w4
                beq  QSearch.DontReturnTTValue\@
                mov  w4, VALUE_MATE_IN_MAX_PLY
                cmp  w8, w4, lsl 1
                bhs  QSearch.ValueFromTT\@

QSearch.ValueFromTTRet\@:
  .if \PvNode == 0
                add  w0, w0, 2
        // w0 = 2 if ttValue<beta     ie BOUND_UPPER
        //    = 1 if ttvalue>=beta    ie BOUND_LOWER
                and  w0, w0, w22
               ldrb  w4, [sp, QSearch.ltte + MainHashEntry.genBound]
                tst  w0, w4
                mov  w0, w27
                bne  QSearch.Return\@
  .endif

QSearch.DontReturnTTValue\@:

// Evaluate the position statically
// w23 = ttHit
  .if \InCheck == 1
                mov  w0, -VALUE_INFINITE
                mov  w4, VALUE_NONE
                str  w4, [x21, State.staticEval]
                str  w0, [sp, QSearch.bestValue]
                str  w0, [sp, QSearch.futilityBase]
  .else
                ldr  w2, [x21, -1*sizeof.State + State.currentMove]
                cbz  w23, QSearch.StaticValueNoTTHit\@

QSearch.StaticValueYesTTHit\@:
              ldrsh  w0, [sp, QSearch.ltte + MainHashEntry.eval]
                mov  w4, VALUE_NONE
                cmp  w0, w4
                bne  1f
                 bl  Evaluate
        1:      mov  x1, 0
                str  w0, [x21, State.staticEval]
                cmp  w27, w0
               cset  w1, gt
                add  w1, w1, 1
        // w1 = 2 if ttValue > bestValue   ie BOUND_LOWER
        //    = 1 if ttValue <=bestValue   ie BOUND_UPPER
                mov  w4, VALUE_NONE
                cmp  w27, w4
                beq  QSearch.StaticValueDone\@
               ldrb  w4, [sp, QSearch.ltte + MainHashEntry.genBound]
                tst  w1, w4
               csel  w0, w27, w0, ne
                  b  QSearch.StaticValueDone\@
        
QSearch.StaticValueNoTTHit\@:
                ldr  w0, [x21, -1*sizeof.State + State.staticEval]
                neg  w0, w0
                add  w0, w0, 2*Eval_Tempo
                mov  w4, MOVE_NULL
                cmp  w2, w4
                beq  1f
                 bl  Evaluate
        1:      str  w0, [x21, State.staticEval]

QSearch.StaticValueDone\@:
                str  w0, [sp, QSearch.bestValue]
        // Return immediately if static value is at least beta
                ldr  w4, [sp, QSearch.beta]
                cmp  w0, w4
                bge  QSearch.ReturnStaticValue\@
    .if \PvNode == 1
                ldr  w1, [sp, QSearch.alpha]
                cmp  w1, w0
               csel  w1, w0, w1, lt
                str  w1, [sp, QSearch.alpha]
    .endif
                add  w0, w0, 128
                str  w0, [sp, QSearch.futilityBase]
  .endif

        // initialize move picker
                ldr  w1, [sp, QSearch.ttMove]
  .if \InCheck == 1
                adr  x25, MovePick_ALL_EVASIONS
                adr  x24, MovePick_EVASIONS
  .else
                ldr  w2, [sp, QSearch.depth]
                adr  x25, MovePick_QCAPTURES_CHECKS_GEN
                adr  x24, MovePick_QSEARCH_WITH_CHECKS
                cmp  w2, DEPTH_QS_NO_CHECKS
                bgt  QSearch.MovePickInitGo\@
                adr  x25, MovePick_QCAPTURES_NO_CHECKS_GEN
                adr  x24, MovePick_QSEARCH_WITHOUT_CHECKS
                cmp  w2, DEPTH_QS_RECAPTURES
                bgt  QSearch.MovePickInitGo\@
                adr  x25, MovePick_RECAPTURES_GEN
                ldr  w0, [x21, -1*sizeof.State + State.currentMove]
                and  w0, w0, 63
                str  w0, [x21, State.recaptureSquare]
                mov  w27, 0
                  b  QSearch.MovePickNoTTMove\@
  .endif
QSearch.MovePickInitGo\@:
                mov  w27, w1
                cbz  w1, QSearch.MovePickNoTTMove\@
                 bl  Move_IsPseudoLegal
                tst  x0, x0
               csel  w27, w0, w27, eq
               csel  x25, x24, x25, ne

QSearch.MovePickNoTTMove\@:
                str  w27, [x21, State.ttMove]
                str  x25, [x21, State.stage]

QSearch.MovePickLoop\@:
                mov  w26, 0
        GetNextMove
                mov  w1, w0
                str  w0, [sp, QSearch.move]
                cbz  w0, QSearch.MovePickDone\@

                ldr  w4, [sp, QSearch.moveCount]
                sub  w4, w4, 1
                str  w4, [sp, QSearch.moveCount]

        // check for check and get address of search function
                 bl  Move_GivesCheck
               strb  w0, [x21, State.givesCheck]
                mov  w23, w0
  .if \PvNode == 1
                adr  x2, QSearch_Pv_NoCheck
                adr  x1, QSearch_Pv_InCheck
  .else
                adr  x2, QSearch_NonPv_NoCheck
                adr  x1, QSearch_NonPv_InCheck
  .endif
                tst  w0, w0
               csel  x2, x1, x2, ne
                str  x2, [sp, QSearch.searchFxn]

                ldr  w1, [sp, QSearch.move]
                ldr  w27, [sp, QSearch.bestValue]
                lsr  w26, w1, 12
               ubfx  w8, w1, 6, 6
                add  x6, x20, Pos.board
               ldrb  w0, [x6, x8]
                mov  w24, w0
                and  w9, w1, 63
                add  x6, x20, Pos.board
               ldrb  w25, [x6, x9]

        // futility pruning
  .if \InCheck == 0
                ldr  w22, [sp, QSearch.futilityBase]
               cbnz  w23, QSearch.SkipFutilityPruning\@
                and  w0, w0, 7
                mov  w4, -VALUE_KNOWN_WIN
                cmp  w22, w4
                ble  QSearch.SkipFutilityPruning\@
                ldr  w2, [x20, Pos.sideToMove]
                neg  w2, w2
                cmp  w0, Pawn
                beq  QSearch.CheckAdvancedPawnPush\@

QSearch.DoFutilityPruning\@:
                lea  x6, PieceValue_EG
                ldr  w2, [x6, x25, lsl 2]
                add  w2, w2, w22
                ldr  w4, [sp, QSearch.alpha]
                cmp  w2, w4
                ble  QSearch.ContinueFromFutilityValue\@
                ldr  w4, [sp, QSearch.alpha]
                cmp  w22, w4
                ble  QSearch.ContinueFromFutilityBase\@

QSearch.SkipFutilityPruning\@:
  .endif

        // do not search moves with negative see value
  .if \InCheck == 0
                sub  w0, w26, MOVE_TYPE_PROM
                lsl  w24, w24, 9
                lsl  w25, w25, 9
                cmp  w0, 4
                blo  QSearch.DontContinue\@
  .else
                mov  w0, VALUE_MATED_IN_MAX_PLY
                sub  w0, w0, w27
                lsl  w24, w24, 9
                ldr  w2, [sp, QSearch.moveCount]
                lsl  w25, w25, 9
               cbnz  w25, QSearch.DontContinue\@
                ldr  w4, [sp, QSearch.depth]
                orr  w2, w2, w4
                cmp  w26, MOVE_TYPE_PROM
                bhs  QSearch.DontContinue\@
                and  w4, w0, w2
                tbz  w4, 31, QSearch.DontContinue\@
  .endif
        SeeSignTest  QSearch.DontContinue\@
                ldr  w2, [sp, QSearch.move]
                cbz  w0, QSearch.MovePickLoop\@

QSearch.DontContinue\@:

        // speculative prefetch
                and  w2, w1, 63
               ubfx  w1, w1, 6, 6
                ldr  x0, [x21, State.key]
                lea  x6, Zobrist_side
                ldr  x4, [x6]
                eor  x0, x0, x4
                lea  x6, Zobrist_Pieces
                add  x6, x6, x24
                ldr  x4, [x6, x1, lsl 3]
                eor  x0, x0, x4
                lea  x6, Zobrist_Pieces
                add  x6, x6, x24
                ldr  x4, [x6, x2, lsl 3]
                eor  x0, x0, x4
                lea  x6, Zobrist_Pieces
                add  x6, x6, x25
                ldr  x4, [x6, x2, lsl 3]
                eor  x0, x0, x4
                lea  x6, mainHash + MainHash.mask
                ldr  x4, [x6]
                and  x0, x0, x4
                lsl  x0, x0, 5
                lea  x6, mainHash + MainHash.table
                ldr  x4, [x6]
                add  x0, x0, x4
               prfm  PLDL1KEEP, [x0]

        // check for legality
                ldr  w1, [sp, QSearch.move]
                 bl  Move_IsLegal
                ldr  w4, [sp, QSearch.moveCount]
                add  w2, w0, 1
                add  w4, w4, w2
                str  w4, [sp, QSearch.moveCount]
                cbz  w0, QSearch.MovePickLoop\@
        
        // make the move
                ldr  w1, [sp, QSearch.move]
                str  w1, [x21, State.currentMove]
                ldr  x26, [sp, QSearch.searchFxn]
                 bl  Move_Do__QSearch

        // search the move
                ldr  w1, [sp, QSearch.beta]
                neg  w1, w1
                ldr  w2, [sp, QSearch.alpha]
                neg  w2, w2
                ldr  w8, [sp, QSearch.depth]
                sub  w8, w8, 1
                blr  x26
                neg  w0, w0
                mov  w27, w0
                str  w0, [sp, QSearch.value]

        // undo the move
                ldr  w1, [sp, QSearch.move]
                 bl  Move_Undo

        // check for new best move
                ldr  w4, [sp, QSearch.bestValue]
                cmp  w27, w4
                ble  QSearch.MovePickLoop\@
                str  w27, [sp, QSearch.bestValue]
                ldr  w4, [sp, QSearch.alpha]
                cmp  w27, w4
                ble  QSearch.MovePickLoop\@

  .if \PvNode == 1
                ldr  w1, [sp, QSearch.move]
                ldr  x8, [x21, 0*sizeof.State + State.pv]
                ldr  x9, [x21, 1*sizeof.State + State.pv]
                mov  w0, 0
                str  w1, [x8]
                add  x8, x8, 4
                cbz  x9, QSearch.pv_copy_end\@

QSearch.pv_copy_loop\@:
                ldr  w0, [x9]
                add  x9, x9, 4
QSearch.pv_copy_end\@:
                str  w0, [x8]
                add  x8, x8, 4
               cbnz  w0, QSearch.pv_copy_loop\@

                ldr  w4, [sp, QSearch.beta]
                cmp  w27, w4
                bge  QSearch.FailHigh\@
                str  w27, [sp, QSearch.alpha]
                str  w1, [sp, QSearch.bestMove]
                  b  QSearch.MovePickLoop\@
  .endif

QSearch.FailHigh\@:
                ldr  x9, [x21, State.key]
                ldr  x8, [sp, QSearch.tte]
                lsr  x9, x9, 48
                mov  w2, w27
                mov  w4, VALUE_MATE_IN_MAX_PLY
                add  w1, w27, w4
                cmp  w1, w4, lsl 1
                bhs  QSearch.FailHighValueToTT\@

QSearch.FailHighValueToTTRet\@:
                ldr  w0, [sp, QSearch.move]
                mov  w3, BOUND_LOWER
               ldrb  w5, [sp, QSearch.ttDepth]
               ldrh  w7, [x21, State.staticEval]
      MainHash_Save  QSearch.ltte, x8, w9, w2, w3, w5, w0, w7
                mov  w0, w27
                  b  QSearch.Return\@

QSearch.FailHighValueToTT\@:
               ldrb  w2, [x21, State.ply]
                asr  w0, w27, 31
                eor  w2, w2, w0
                sub  w2, w2, w0
                add  w2, w2, w27
                  b  QSearch.FailHighValueToTTRet\@

QSearch.MovePickDone\@:
                ldr  x9, [x21, State.key]
                ldr  w27, [sp, QSearch.bestValue]
                mov  w4, VALUE_MATE_IN_MAX_PLY
                add  w1, w27, w4
  .if \InCheck == 1
               ldrb  w0, [x21, State.ply]
                mov  w4, VALUE_MATE
                sub  w0, w0, w4
                mov  w4, -VALUE_INFINITE
                cmp  w27, w4
                beq  QSearch.Return\@
  .endif

  .if \PvNode == 1
                ldr  w26, [sp, QSearch.oldAlpha]
                sub  w26, w26, w27
                asr  w26, w26, 31
  .endif
                ldr  x8, [sp, QSearch.tte]
                lsr  x9, x9, 48
                mov  w2, w27
                mov  w4, VALUE_MATE_IN_MAX_PLY
                cmp  w1, w4, lsl 1
                bhs  QSearch.ValueToTT\@

QSearch.ValueToTTRet\@:
                ldr  w0, [sp, QSearch.bestMove]
               ldrb  w5, [sp, QSearch.ttDepth]
  .if \PvNode == 0
                mov  w3, BOUND_UPPER
               ldrh  w7, [x21, State.staticEval]
      MainHash_Save  QSearch.ltte, x8, w9, w2, w3, w5, w0, w7
  .else
                and  w26, w26, BOUND_EXACT-BOUND_UPPER
                add  w26, w26, BOUND_UPPER
               ldrh  w7, [x21, State.staticEval]
      MainHash_Save  QSearch.ltte, x8, w9, w2, w26, w5, w0, w7
  .endif
                mov  w0, w27

QSearch.Return\@:

Display 2, "QSearch returning %i0\n"

                add  sp, sp, QSearch.localsize
                ldp  x24, x25, [sp], 16
                ldp  x22, x23, [sp], 16
                ldp  x26, x27, [sp], 16
                ldp  x21, x30, [sp], 16
                ret

  .if \InCheck == 0
QSearch.CheckAdvancedPawnPush\@:
                and  w2, w2, 7
                lsr  w8, w8, 3
                eor  w2, w2, w8
                cmp  w2, 4
                blo  QSearch.DoFutilityPruning\@
                  b  QSearch.SkipFutilityPruning\@

QSearch.ContinueFromFutilityBase\@:
                mov  w2, 1
                 bl  SeeTestGe
                ldr  w1, [sp, QSearch.move]
                mov  w2, w22
               cbnz  w0, QSearch.SkipFutilityPruning\@

QSearch.ContinueFromFutilityValue\@:
                cmp  w27, w2
               csel  w27, w2, w27, lt
                str  w27, [sp, QSearch.bestValue]
                  b  QSearch.MovePickLoop\@
  .endif

QSearch.AbortSearch_PlyBigger\@:
                mov  w0, 0
                ldr  x4, [x21, State.checkersBB]
               cbnz  x4, QSearch.Return\@
                 bl  Evaluate
                  b  QSearch.Return\@

QSearch.AbortSearch_PlySmaller\@:
                mov  w0, 0
                  b  QSearch.Return\@

QSearch.ReturnStaticValue\@:
                ldr  x8, [sp, QSearch.tte]
                ldr  x9, [x21, State.key]
                lsr  x9, x9, 48
                mov  w2, w0
               cbnz  w23, QSearch.Return\@
                mov  w4, VALUE_MATE_IN_MAX_PLY
                add  w0, w0, w4
	        cmp  w0, w4, lsl 1
                bhs  QSearch.ReturnStaticValue_ValueToTT\@


QSearch.ReturnStaticValue_ValueToTTRet\@:
                mov  w3, BOUND_LOWER
                mov  w5, DEPTH_NONE
                mov  w0, 0
               ldrh  w7, [x21, State.staticEval]
      MainHash_Save  QSearch.ltte, x8, w9, w2, w3, w5, w0, w7
                ldr  w0, [sp, QSearch.bestValue]
                  b  QSearch.Return\@

QSearch.ReturnStaticValue_ValueToTT\@:
               ldrb  w1, [x21, State.ply]
                asr  w0, w2, 31
                eor  w1, w1, w0
                sub  w2, w2, w0
                add  w2, w2, w1
                  b  QSearch.ReturnStaticValue_ValueToTTRet\@

QSearch.ValueFromTT\@:
        // value in edi is not VALUE_NONE
               ldrb  w8, [x21, State.ply]
                asr  w9, w27, 31
                eor  w8, w8, w9
                add  w27, w27, w9
                sub  w27, w27, w8
                ldr  w4, [sp, QSearch.beta]
                str  w27, [sp, QSearch.ttValue]
                sub  w0, w27, w4
                asr  w0, w0, 31
                  b  QSearch.ValueFromTTRet\@

QSearch.ValueToTT\@:
               ldrb  w2, [x21, State.ply]
                asr  w0, w27, 31
                eor  w2, w2, w0
                sub  w2, w2, w0
                add  w2, w2, w27
                  b  QSearch.ValueToTTRet\@

QSearch.CheckDraw_Cold\@:
     PosIsDraw_Cold  QSearch.AbortSearch_PlySmaller\@, QSearch.CheckDraw_ColdRet\@

.endm
